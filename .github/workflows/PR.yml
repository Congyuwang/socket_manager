name: PR Check

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-macos:
    runs-on: macos-latest

    strategy:
      matrix:
        shared: ["ON", "OFF"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install LLVM and Clang
        run: brew install llvm@16 || true

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=${{ matrix.shared }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
        env:
          SOCKET_LOG: debug

      - name: Install
        run: sudo cmake --install build --config Release

      - name: Test Linking
        working-directory: ${{github.workspace}}/tests/test_find_package
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cd build
          ./helloworld_server &
          rsp=$(curl http://127.0.0.1:49999)
          # Give the server time to start
          sleep 1
          if [[ "$rsp" == "Hello, world" ]]; then
            echo "Test passed"
            exit 0
          else
            echo "Test failed"
            exit 1
          fi

  build-focal:
    runs-on: ubuntu-latest
    container:
      image: congyuwang/socket-manager-dev:focal
      env:
        Rust_COMPILER: /root/.cargo/bin/rustc
    strategy:
      matrix:
        shared: ["ON", "OFF"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=${{ matrix.shared }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
        env:
          SOCKET_LOG: debug

      - name: Install
        run: sudo cmake --install build --config Release

      - name: Test Linking
        working-directory: ${{github.workspace}}/tests/test_find_package
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cd build
          ./helloworld_server &
          rsp=$(curl http://127.0.0.1:49999)
          # Give the server time to start
          sleep 1
          if [[ "$rsp" == "Hello, world" ]]; then
            echo "Test passed"
            exit 0
          else
            echo "Test failed"
            exit 1
          fi


  build-jammy:
    runs-on: ubuntu-latest
    container:
      image: congyuwang/socket-manager-dev:jammy
      env:
        Rust_COMPILER: /root/.cargo/bin/rustc

    strategy:
      matrix:
        shared: ["ON", "OFF"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=${{ matrix.shared }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
        env:
          SOCKET_LOG: debug

      - name: Install
        run: sudo cmake --install build --config Release

      - name: Test Linking
        working-directory: ${{github.workspace}}/tests/test_find_package
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cd build
          ./helloworld_server &
          rsp=$(curl http://127.0.0.1:49999)
          # Give the server time to start
          sleep 1
          if [[ "$rsp" == "Hello, world" ]]; then
            echo "Test passed"
            exit 0
          else
            echo "Test failed"
            exit 1
          fi


  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        shared: ["ON", "OFF"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install LLVM and Clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16 all
          chmod +x update-alternatives-clang.sh
          sudo ./update-alternatives-clang.sh 16 9999

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=${{ matrix.shared }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
        env:
          SOCKET_LOG: debug

      - name: Install
        run: sudo cmake --install build --config Release

      - name: Test Linking
        working-directory: ${{github.workspace}}/tests/test_find_package
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          cd build
          ./helloworld_server &
          rsp=$(curl http://127.0.0.1:49999)
          # Give the server time to start
          sleep 1
          if [[ "$rsp" == "Hello, world" ]]; then
            echo "Test passed"
            exit 0
          else
            echo "Test failed"
            exit 1
          fi
